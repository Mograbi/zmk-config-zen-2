/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD0";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        U_bracket_mod: U_bracket_mod {
            compatible = "zmk,behavior-mod-morph";
            label = "U_BRACKET_MOD";
            bindings = <&kp U>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_RALT|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
        };

        I_right_bracket: I_right_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "I_RIGHT_BRACKET";
            bindings = <&kp I>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_RALT|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
        };

        j_bracket: j_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "J_BRACKET";
            bindings = <&kp J>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LGUI)>;
        };

        k_bracket: k_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "K_BRACKET";
            bindings = <&kp K>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        z_equal: z_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "Z_EQUAL";
            bindings = <&kp Z>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
        };

        escape_grave: escape_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "ESCAPE_GRAVE";
            bindings = <&kp ESC>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        ctrl_combo {
            bindings = <&kp RCTRL>;
            key-positions = <15 16>;
        };

        jkalt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <19 20>;
        };

        jump_layer_1 {
            bindings = <&to 0>;
            key-positions = <19 20 21 22>;
        };

        jump_to_game {
            bindings = <&to 4>;
            key-positions = <31 32 33 34>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";

            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   | 
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&escape_grave  &kp Q     &kp W  &kp E     &kp R  &kp T        &kp Y      &U_bracket_mod  &I_right_bracket  &kp O    &kp P     &kp BSPC
&kp TAB        &kp A     &kp S  &kp D     &kp F  &kp G        &kp H      &j_bracket      &k_bracket        &kp L    &kp SEMI  &kp SQT
&td0           &z_equal  &kp X  &kp C     &kp V  &kp B        &kp N      &kp M           &kp COMMA         &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                                &kp LALT  &mo 1  &kp ENTER    &kp SPACE  &mo 2           &kp RCTRL
            >;
        };

        lower_layer {
            display-name = "NUMBER";

            // -----------------------------------------------------------------------------------------
            // |      |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |   -  |
            // |      |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |   \  |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     | SHFT |
            //                    |     |     |     |   | DEL | INS |    |

            bindings = <
&kp GRAVE       &kp EXCL   &kp AT          &kp HASH         &kp DLLR  &kp PRCNT          &kp CARET        &kp AMPS         &kp ASTRK        &kp LPAR  &kp RPAR  &kp MINUS
&trans          &kp N1     &kp N2          &kp N3           &kp N4    &kp N5             &kp N6           &kp N7           &kp N8           &kp N9    &kp N0    &kp BSLH
&kp LEFT_SHIFT  &kp EQUAL  &rgb_ug RGB_ON  &rgb_ug RGB_OFF  &trans    &rgb_ug RGB_EFF    &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &kp DOT   &trans    &kp RIGHT_SHIFT
                                           &trans           &trans    &trans             &kp DEL          &kp INS          &trans
            >;
        };

        raise_layer {
            display-name = "SYMBOL";

            // -----------------------------------------------------------------------------------------
            // |   ~  |     |     |  v-  | v+  |     |   | PG UP|     |  UP  |      |     | DEL  |
            // |      |     |     | HOME | END |     |   | PG DN| LFT |  DWN | RGHT |     |      |
            // | SHFT |     |     |prev  | next|pause|   |      |     |     |       |     | SHFT |
            //                    | GUI |     | ENT |   | SPACE |     | CTRL |

            bindings = <
&kp TILDE       &trans  &trans  &kp C_VOL_DN  &kp C_VOL_UP  &trans         &kp PG_UP  &trans    &kp UP     &trans     &trans  &kp DEL
&trans          &trans  &trans  &kp HOME      &kp END       &trans         &kp PG_DN  &kp LEFT  &kp DOWN   &kp RIGHT  &trans  &trans
&kp LEFT_SHIFT  &trans  &trans  &kp C_PREV    &kp C_NEXT    &kp C_PAUSE    &trans     &trans    &trans     &trans     &trans  &kp RIGHT_SHIFT
                                &kp LGUI      &trans        &kp RET        &kp SPACE  &trans    &kp RCTRL
            >;
        };

        layer_3 {
            display-name = "Fn";

            // -----------------------------------------------------------------------------------------
            // |  `   |  F1 |  F2 |  F3  | F4  |  F5 |     | F6   | F7  |  F8  |  F9  | F10  | F11  |
            // |      | BT0 | BT1 | BT2  | BT3 | BT4 |     |CLR BT|     |      |      | PS   | F12  |
            // |      |   |   |  | sys_reset|bootloader|     | bootloader |     |     |       |     | SHFT |
            //                    | GUI |     | ENT |     | SPACE |     | CTRL |

            bindings = <
&trans  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6          &kp F7  &kp F8  &kp F9  &kp F10          &kp F11
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_CLR_ALL  &trans  &trans  &trans  &kp PRINTSCREEN  &kp F12
&trans  &trans        &trans        &trans        &sys_reset    &bootloader     &bootloader     &trans  &trans  &trans  &trans           &trans
                                    &trans        &trans        &trans          &trans          &trans  &trans
            >;
        };

        Game_layer {
            bindings = <
&trans          &trans    &kp UP_ARROW  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans          &kp LEFT  &kp DOWN      &kp RIGHT  &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &trans    &trans        &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans     &kp LCTRL  &kp SPACE    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        layer3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };

        layer32 {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };
};
